test_check_true_cases = [
    "x = x",
    "x = _x",
    "x = X",
    "x = _som123e_vaR123",
    "x = 1",
    "x = 0",
    "x = -1",
    "x = true",
    "x = false",
    'x = r"a* (b | c)"',
    'x = g"S -> S b "',
    "x = g.set_start_states({1, 2})",
    "x = g.set_final_states({1, 2})",
    "x = g.add_start_states({1, 2})",
    "x = g.add_final_states({1, 2})",
    "x = g.get_start_states",
    "x = g.get_final_states",
    "x = (g.get_reachables)",
    "x = g.get_vertexes",
    "x = map({ v -> 1 }, g)",
    "x = filter({ v -> false }, {1, 2})",
    "x = filter({ v -> s in {1, 2} }, {1, 2})",
    "x = (a, b)",
    'x = (a, "label", b)',
    "x = (a)",
    "x = (((((1, 2), ((1), (1, 2, (3, 4)), (1, 2))))))",
    "x = {}",
    "x = {1}",
    "x = {1, 2, 3, 4, 5, 6}",
    "x = a & b",
    "x = a ^ b",
    "x = a | b",
    "x = a in b",
    "x = a*",
    "x = map({ _ -> 1 }, {})",
    "x = map({ name_123 -> 1 }, {})",
    "x = map({ (a, b) -> 1 }, {})",
    "x = map({ (a, b, c) -> 1 }, {})",
    "x = map({ (((_, (v1, _)), (a, b)), _, (_, _)) -> 1 }, {})",
    "print(1)",
    "print(1) # some comment",
    "\n\n\nprint(1)\n\nprint(2)\n",
]

test_check_false_cases = [
    "x = 1x",
    "1x = 1x",
    "x = 023423",
    "x = 0000",
    "x = set_start_states()",
    "x = set_start_states({1, 2}, g)",
    "x = set_final_states({1, 2})",
    "x = set_final_states({1, 2}, g, 1)",
    "x = add_start_states({1, 2})",
    "x = add_start_states({1, 2}, g)",
    "x = add_final_states({1, 2})",
    "x = add_final_states({1, 2}, g, 1)",
    "x = get_start_states",
    "x = get_final_states()",
    "x = {,}",
    "x = {1, 2,}",
    "x = {1 2 3}",
    "x = (,)",
    "x = (a,)",
    "x = (,,)",
    'x = (a, "label", b, 1)',
    'x = (a, "label", b,)',
    "x = ()",
    "x = a ^",
    "x = a |",
    "x = & b",
    "x = a &",
    "x = ^ b",
    "x = a in",
    "x = in b",
    "x = * b",
    "x = a * b",
    "x = map({ v -> 1 })",
    "x = map({ v -> 1 }, g, 1)",
    "x = filter({ v -> false })",
    "x = filter({ v -> false }, g, 1)",
    "x = load_dot()",
    'x = load_graph("path.txt", 1)',
    "x = map({ 1 -> 1 }, {})",
    "x = 1 2",
    "x y z = 1",
    "print()",
    "print(1, 2, 3)",
    "print(1 2 3)",
]

test_grammar_ast = """
a = 1
b = 1
b = 10
x = map({ name -> name ^ 1 }, {a, b})
m = g.set_start_states({1, 2})
# Print start states
print(g.get_start_states)
"""
